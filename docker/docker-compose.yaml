name: cutout

networks:
  internal:
    external: false

volumes:
  django-db: {}
  django-static: {}
  object-data: {}
  scratch: {}

services:
  setup-permissions:
    image: ubuntu:24.04
    restart: on-failure
    command:
      - bash
      - -c
      - |-
        set -euo pipefail
        chown -R ${USERID:-1000}:${USERID:-1000} \
          /static \
          /scratch
    volumes:
      - django-static:/static
      - scratch:/scratch
  api-server:
    image: hub.ncsa.illinois.edu/des-public/cutout-service:dev
    platform: linux/x86_64
    build:
      context: ../app
      dockerfile: ../docker/Dockerfile
      args:
        UID: "${USERID:-1000}"
    command: bash entrypoints/run_api_server.sh
    networks:
      internal:
        aliases:
          - ${API_SERVER_HOST:-api-server}
    ports:
      - 127.0.0.1:${API_SERVER_PORT:-8000}:${API_SERVER_PORT:-8000}
    environment:
      # Dev environment settings
      MAKE_MIGRATIONS: "${MAKE_MIGRATIONS:-false}"
      DATA_INIT: "${DATA_INIT:-true}"
      DJANGO_DEBUG: "${DJANGO_DEBUG:-true}"
      DEV_MODE: "${DEV_MODE:-true}" # Enable Django dev server instead of uvicorn
      SUPPORT_EMAIL: "${SUPPORT_EMAIL:-devnull@example.com}" # Enable Django dev server instead of uvicorn
      # Service configuration
      API_SERVER_HOST: "${API_SERVER_HOST:-api-server}"
      API_SERVER_PORT: "${API_SERVER_PORT:-8000}"
      API_PROXY_HOST: "${API_PROXY_HOST:-api-proxy}"
      API_PROXY_PORT: "${API_PROXY_PORT:-4000}"
      # Django base configuration
      DJANGO_SUPERUSER_PASSWORD: "${DJANGO_SUPERUSER_PASSWORD:-password}"
      DJANGO_SUPERUSER_USERNAME: "${DJANGO_SUPERUSER_USERNAME:-admin}"
      DJANGO_SUPERUSER_EMAIL: "${DJANGO_SUPERUSER_EMAIL:-test@example.com}"
      # Django database configuration
      DATABASE_HOST: "${DATABASE_HOST:-django-db}"
      DATABASE_PORT: "${DATABASE_PORT:-5432}"
      DATABASE_DB: "${DATABASE_DB:-django}"
      DATABASE_USER: "${DATABASE_USER:-django}"
      DATABASE_PASSWORD: "${DATABASE_PASSWORD:-password}"
      # Message broker configuration
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER:-rabbitmq}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS:-rabbitmq}"
      MESSAGE_BROKER_HOST: "${MESSAGE_BROKER_HOST:-rabbitmq}"
      MESSAGE_BROKER_PORT: "${MESSAGE_BROKER_PORT:-5672}"
      # Application configuration
      APP_ROOT_DIR: "${APP_ROOT_DIR:-/opt}"
      DES_CUTTER_DIR: "${DES_CUTTER_DIR:-/}"
      DES_ARCHIVE_ROOT: "${DES_ARCHIVE_ROOT:-/des_archive}"
      # S3 configuration
      AWS_S3_ACCESS_KEY_ID: "${AWS_S3_ACCESS_KEY_ID:-minioadmin}"
      AWS_S3_SECRET_ACCESS_KEY: "${AWS_S3_SECRET_ACCESS_KEY:-minioadmin}"
      MINIO_ROOT_USER: "${AWS_S3_ACCESS_KEY_ID:-minioadmin}"
      MINIO_ROOT_PASSWORD: "${AWS_S3_SECRET_ACCESS_KEY:-minioadmin}"
      S3_SERVER_PORT: "${S3_SERVER_PORT:-9000}"
      S3_CONSOLE_PORT: "${S3_CONSOLE_PORT:-9001}"
      S3_ENDPOINT_URL: "${S3_ENDPOINT_URL:-http://object-store:9000}"
      S3_REGION_NAME: "${S3_REGION_NAME:-osn}"
      S3_BUCKET: "${S3_BUCKET:-descut}"
      S3_BASE_DIR: "${S3_BASE_DIR:-descut}"
      # OIDC configuration
      OIDC_CLIENT_ID: "${OIDC_CLIENT_ID-}"
      OIDC_CLIENT_SECRET: "${OIDC_CLIENT_SECRET-}"
      OIDC_OP_AUTHORIZATION_ENDPOINT: "${OIDC_OP_AUTHORIZATION_ENDPOINT-}"
      OIDC_OP_TOKEN_ENDPOINT: "${OIDC_OP_TOKEN_ENDPOINT-}"
      OIDC_OP_USER_ENDPOINT: "${OIDC_OP_USER_ENDPOINT-}"
      OIDC_OP_JWKS_ENDPOINT: "${OIDC_OP_JWKS_ENDPOINT-}"
      OIDC_OP_LOGOUT_ENDPOINT: "${OIDC_OP_LOGOUT_ENDPOINT-}"
    volumes:
      - "django-static:${APP_ROOT_DIR:-/opt}/static"
      - ../data/files/des_archive:/des_archive
      # - /mnt/des_archive:/des_archive:ro
      - ../data/db/duckdb:/data/db
      - ../app:/opt/app

  celery-worker:
    image: hub.ncsa.illinois.edu/des-public/cutout-service:dev
    platform: linux/x86_64
    build:
      context: ../app
      dockerfile: ../docker/Dockerfile
      args:
        UID: "${USERID:-1000}"
    command: bash entrypoints/run_celery_worker.sh api,jobs
    networks:
      - internal
    deploy:
      mode: replicated
      replicas: 2
      resources:
        reservations:
          cpus: '0.25'
          memory: 1G
        limits:
          cpus: "${CELERY_WORKER_LIMIT_CPUS:-4.0}"
          memory: ${CELERY_WORKER_LIMIT_MEMORY:-4G}
    environment:
      # Dev environment settings
      DJANGO_DEBUG: "${DJANGO_DEBUG:-true}"
      DEV_MODE: "${DEV_MODE:-true}" # Enable Django dev server instead of uvicorn
      CELERY_LOG_LEVEL: ${CELERY_LOG_LEVEL:-INFO}
      CELERY_CONCURRENCY: ${CELERY_CONCURRENCY:-4}
      # Service configuration
      API_SERVER_HOST: "${API_SERVER_HOST:-api-server}"
      API_SERVER_PORT: "${API_SERVER_PORT:-8000}"
      # Django database configuration
      DATABASE_HOST: "${DATABASE_HOST:-django-db}"
      DATABASE_PORT: "${DATABASE_PORT:-5432}"
      DATABASE_DB: "${DATABASE_DB:-django}"
      DATABASE_USER: "${DATABASE_USER:-django}"
      DATABASE_PASSWORD: "${DATABASE_PASSWORD:-password}"
      # Message broker configuration
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER:-rabbitmq}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS:-rabbitmq}"
      MESSAGE_BROKER_HOST: "${MESSAGE_BROKER_HOST:-rabbitmq}"
      MESSAGE_BROKER_PORT: "${MESSAGE_BROKER_PORT:-5672}"
      # Application configuration
      APP_ROOT_DIR: "${APP_ROOT_DIR:-/opt}"
      DES_CUTTER_DIR: "${DES_CUTTER_DIR:-/}"
      DES_ARCHIVE_ROOT: "${DES_ARCHIVE_ROOT:-/des_archive}"
      # S3 configuration
      AWS_S3_ACCESS_KEY_ID: "${AWS_S3_ACCESS_KEY_ID:-minioadmin}"
      AWS_S3_SECRET_ACCESS_KEY: "${AWS_S3_SECRET_ACCESS_KEY:-minioadmin}"
      MINIO_ROOT_USER: "${AWS_S3_ACCESS_KEY_ID:-minioadmin}"
      MINIO_ROOT_PASSWORD: "${AWS_S3_SECRET_ACCESS_KEY:-minioadmin}"
      S3_SERVER_PORT: "${S3_SERVER_PORT:-9000}"
      S3_CONSOLE_PORT: "${S3_CONSOLE_PORT:-9001}"
      S3_ENDPOINT_URL: "${S3_ENDPOINT_URL:-http://object-store:9000}"
      S3_REGION_NAME: "${S3_REGION_NAME:-osn}"
      S3_BUCKET: "${S3_BUCKET:-descut}"
      S3_BASE_DIR: "${S3_BASE_DIR:-descut}"
    volumes:
      - ../data/files/des_archive:/des_archive
      # - /mnt/des_archive:/des_archive:ro
      - ../data/db/duckdb:/data/db
      - ../app:/opt/app
      - scratch:/scratch

  celery-beat:
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
    image: hub.ncsa.illinois.edu/des-public/cutout-service:dev
    build:
      context: ../app
      dockerfile: ../docker/Dockerfile
      args:
        UID: "${USERID:-1000}"
    command: bash entrypoints/run_celery_beat.sh
    environment:
      DJANGO_DEBUG: "${DJANGO_DEBUG:-true}"
      DEV_MODE: "${DEV_MODE:-true}" # Enable Django dev server instead of uvicorn
      CELERY_LOG_LEVEL: ${CELERY_LOG_LEVEL:-INFO}
      # Service configuration
      API_SERVER_HOST: "${API_SERVER_HOST:-api-server}"
      API_SERVER_PORT: "${API_SERVER_PORT:-8000}"
      # Django database configuration
      DATABASE_HOST: "${DATABASE_HOST:-django-db}"
      DATABASE_PORT: "${DATABASE_PORT:-5432}"
      DATABASE_DB: "${DATABASE_DB:-django}"
      DATABASE_USER: "${DATABASE_USER:-django}"
      DATABASE_PASSWORD: "${DATABASE_PASSWORD:-password}"
      # Message broker configuration
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER:-rabbitmq}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS:-rabbitmq}"
      MESSAGE_BROKER_HOST: "${MESSAGE_BROKER_HOST:-rabbitmq}"
      MESSAGE_BROKER_PORT: "${MESSAGE_BROKER_PORT:-5672}"
    networks:
      - internal
    volumes:
      - ../app:/opt/app

  flower:
    image: hub.ncsa.illinois.edu/des-public/cutout-service:dev
    platform: linux/x86_64
    build:
      context: ../app
      dockerfile: ../docker/Dockerfile
      args:
        UID: "${USERID:-1000}"
    command: bash entrypoints/run_flower.sh
    networks:
      internal:
        aliases:
          - ${FLOWER_HOST:-flower}
    ports:
      - 127.0.0.1:${FLOWER_PORT:-8888}:${FLOWER_PORT:-8888}
    environment:
      # Service configuration
      API_SERVER_HOST: "${API_SERVER_HOST:-api-server}"
      API_SERVER_PORT: "${API_SERVER_PORT:-8000}"
      # Message broker configuration
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER:-rabbitmq}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS:-rabbitmq}"
      MESSAGE_BROKER_HOST: "${MESSAGE_BROKER_HOST:-rabbitmq}"
      MESSAGE_BROKER_PORT: "${MESSAGE_BROKER_PORT:-5672}"
      # Flower configuration
      FLOWER_LOG_LEVEL: "${FLOWER_LOG_LEVEL:-INFO}"
      FLOWER_URL_PREFIX: "${FLOWER_URL_PREFIX:-flower}"
      FLOWER_HOST: "${FLOWER_HOST:-flower}"
      FLOWER_PORT: "${FLOWER_PORT:-8888}"
      # Django database configuration
      DATABASE_HOST: "${DATABASE_HOST:-django-db}"
      DATABASE_PORT: "${DATABASE_PORT:-5432}"
      DATABASE_DB: "${DATABASE_DB:-django}"
      DATABASE_USER: "${DATABASE_USER:-django}"
      DATABASE_PASSWORD: "${DATABASE_PASSWORD:-password}"

  django-db:
    image: postgres:17
    platform: linux/x86_64
    restart: always
    networks:
      internal:
        aliases:
          - ${DATABASE_HOST:-django-db}
    environment:
      POSTGRES_USER: "${DATABASE_USER:-django}"
      POSTGRES_PASSWORD: "${DATABASE_PASSWORD:-password}"
      POSTGRES_DB: "${DATABASE_DB:-django}"
    volumes:
      - django-db:/var/lib/postgresql

  api-proxy:
    image: nginx:1.29
    platform: linux/x86_64
    # restart: always
    networks:
      - internal
    ports:
      - 127.0.0.1:${API_PROXY_PORT:-4000}:${API_PROXY_PORT:-4000}
    environment:
      API_PROXY_PORT: "${API_PROXY_PORT:-4000}"
      API_SERVER_HOST: "${API_SERVER_HOST:-api-server}"
      API_SERVER_PORT: "${API_SERVER_PORT:-8000}"
      FLOWER_URL_PREFIX: "${FLOWER_URL_PREFIX:-flower}"
      FLOWER_HOST: "${FLOWER_HOST:-flower}"
      FLOWER_PORT: "${FLOWER_PORT:-8888}"
    volumes:
      - django-static:/static
      - ./nginx.conf.tpl:/etc/nginx/nginx.conf.tpl:ro
      - ./nginx_init.sh:/docker-entrypoint.d/nginx_init.sh:ro
      - ../app/entrypoints/wait-for-it.sh:/wait-for-it.sh

  rabbitmq:
    image: rabbitmq:4.1.2-alpine
    platform: linux/x86_64
    restart: always
    networks:
      internal:
        aliases:
          - ${MESSAGE_BROKER_HOST:-rabbitmq}
    ports:
      - 127.0.0.1:${MESSAGE_BROKER_PORT:-5672}:${MESSAGE_BROKER_PORT:-5672}
      - 127.0.0.1:${MESSAGE_BROKER_MANAGEMENT_PORT:-15672}:${MESSAGE_BROKER_MANAGEMENT_PORT:-15672}
    environment:
      # Message broker configuration
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER:-rabbitmq}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS:-rabbitmq}"
      MESSAGE_BROKER_HOST: "${MESSAGE_BROKER_HOST:-rabbitmq}"
      MESSAGE_BROKER_PORT: "${MESSAGE_BROKER_PORT:-5672}"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 20s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - 127.0.0.1:${REDIS_PORT:-6379}:6379
    networks:
      - internal

  object-store:
    image: quay.io/minio/minio:RELEASE.2025-06-13T11-33-47Z
    platform: linux/x86_64
    ports:
      - 127.0.0.1:${S3_CONSOLE_PORT:-9001}:${S3_CONSOLE_PORT:-9001}
      - 127.0.0.1:${S3_SERVER_PORT:-9000}:${S3_SERVER_PORT:-9000}
    networks:
      - internal
    command:
    - server
    - /data
    - --console-address
    - ":${S3_CONSOLE_PORT:-9001}"
    environment:
      # S3 configuration
      MINIO_ROOT_USER: "${AWS_S3_ACCESS_KEY_ID:-minioadmin}"
      MINIO_ROOT_PASSWORD: "${AWS_S3_SECRET_ACCESS_KEY:-minioadmin}"
      S3_SERVER_PORT: "${S3_SERVER_PORT:-9000}"
      S3_CONSOLE_PORT: "${S3_CONSOLE_PORT:-9001}"
    volumes:
      - object-data:/data
